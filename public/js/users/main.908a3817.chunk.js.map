{"version":3,"sources":["reducers/app.reducer.tsx","user-crud-handlers/create.tsx","user-crud-handlers/delete.tsx","user-crud-handlers/update.tsx","user-crud-handlers/read.tsx","components/Alert.tsx","components/User.tsx","components/UserListHeader.tsx","components/UserList.tsx","components/AddUser.tsx","components/EditUser.tsx","components/ViewUser.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","users","payload","alert","show","message","error","onViewUser","onAddUser","onEditUser","user","currentUsers","push","index","findIndex","id","splice","onViewTenant","tenant","handleCreateUser","userToCreate","dispatch","a","fetch","method","headers","body","JSON","stringify","response","ok","Error","statusText","json","userCreated","handleDeleteUser","handleUpdateUser","editedUser","handleReadUsers","findOptions","encodeURI","data","usersCount","count","Alert","onClickHandler","color","onClick","remove","User","appContext","useContext","AppContext","firstName","middleName","lastName","commonName","gender","primaryEmailAddress","isActive","className","window","confirm","UserListHeader","UserList","props","userListRows","map","AddUser","initialUserState","middletName","dateOfBirth","Date","profile","homeAddress","Nationality","stateOfOrigin","bulmaProperties","primaryColor","primaryBackground","useState","setUser","onChange","event","userState","target","name","value","onSubmit","preventDefault","placeholder","required","EditUser","ViewUser","aria-label","React","createContext","App","jwtToken","useReducer","useEffect","myAlert","Provider","Boolean","location","hostname","match","initialData","document","getElementById","getAttribute","initialProps","parse","ReactDOM","hydrate","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.908a3817.chunk.js","sourcesContent":["import { IState, IAction } from '../app.interfaces';\r\n\r\nconst reducer = (state: IState, action: IAction) => {\r\n    switch (action.type) {\r\n        case 'FetchDataSuccess':\r\n            return {\r\n                ...state, users: action.payload!.users\r\n            };\r\n        case 'FetchDataFailure':\r\n            return {\r\n                ...state, alert: { show: true, type: \"danger\", message: `Could not load remote data: ${action.payload!.error}` }\r\n            };\r\n        case 'HandleViewUser':\r\n            return {\r\n                ...state, onViewUser: true, onAddUser: false, onEditUser: false, user: action.payload!.user\r\n            };\r\n        case 'HandleCloseViewUser':\r\n            return{\r\n                ...state, onViewUser: false, user: null\r\n            }\r\n        case 'HandleOnAddUser':\r\n            return {\r\n                ...state, onAddUser: true, onEditUser: false, alert: {...state.alert, show: false}\r\n            };\r\n        case 'HandleCancelCreate':\r\n            return {\r\n                ...state, onAddUser: false\r\n            };\r\n        case 'BeforeCreateUser':\r\n            //goal here is to set alert to show creating user message\r\n            return {\r\n                ...state, alert: { show: true, type: \"info\", message: 'Creating user. Please wait!' }\r\n            };\r\n        case 'CreateUserSuccess': {\r\n            //goal here is to update state with user created\r\n            const currentUsers = state.users!;\r\n            currentUsers.push(action.payload!.user!);\r\n            return {\r\n                ...state, users: currentUsers, onAddUser: false, alert: { show: true, type: \"success\", message: 'User successfully created!' }\r\n            };\r\n        };\r\n        case 'CreateUserFailure':\r\n            //goal here is to set alert to show failure to create\r\n            return {\r\n                ...state, alert: { show: true, type: \"danger\", message: `Could not create user: ${action.payload!.error}` }\r\n            };\r\n        case 'BeforeDeleteUser':\r\n            //goal here is to set alert to show deleting tenant message\r\n            return { \r\n                ...state, alert: { show: true, type: \"info\", message: 'Deleting user. Please wait!' } \r\n            };\r\n        case 'DeleteUserSuccess': {\r\n            //goal here is to remove deleted user from state\r\n            const currentUsers = state.users;\r\n            //find the index corresponding to the user with the passed id\r\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\r\n            currentUsers!.splice(index, 1);\r\n            return { \r\n                ...state, onViewUser: false, users: currentUsers, alert: { show: true, type: \"success\", message: 'User successfully deleted!' } \r\n            };\r\n        };\r\n        case 'DeleteUserFailure':\r\n            //goal here is to set alert to show failure to delete\r\n            return { \r\n                ...state, onViewTenant: false, alert: { show: true, type: \"danger\", message: `Could not delete user: ${action.payload!.error}` } \r\n            };\r\n        case 'BeforeUpdateUser':\r\n            //goal here is to set alert to show updating user message\r\n            return { \r\n                ...state, alert: { show: true, type: \"info\", message: 'Updating user. Please wait!' } \r\n            };\r\n        case 'HandleCancelUpdate':\r\n            return { \r\n                ...state, onEditUser: false \r\n            };\r\n        case 'HandleEditUser': {\r\n            //alert(JSON.stringify(action.payload!.tenant))\r\n            //goal here is to find the user to be edited and set the user in state to be edited\r\n            const currentUsers = state.users;\r\n            \r\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.id);\r\n            const user = currentUsers![index];\r\n            return { \r\n                ...state, onEditUser: true, user: user, onAddUser: false, alert: {...state.alert, show: false} \r\n            };\r\n        };\r\n        case 'UpdateUserSuccess': {\r\n            //goal here is to update state with user updated\r\n            const currentUsers = state.users;\r\n            const index = currentUsers!.findIndex((user) => user.id === action.payload!.user!.id);\r\n            //now change the value for that user in state\r\n            currentUsers![index] = action.payload!.user!;\r\n            return { \r\n                ...state, onViewUser: false, users: currentUsers, tenant: action.payload!.user!, onEditUser: false, alert: { show: true, type: \"success\", message: 'User successfully updated!' } \r\n            };\r\n        };\r\n        case 'UpdateUserFailure':\r\n            //goal here is to set alert to show failure to update\r\n            return { \r\n                ...state, onViewUser: false, alert: { show: true, type: \"danger\", message: `Could not update user: ${action.payload!.error}` } \r\n            };\r\n        case 'HandleCloseAlert':\r\n            return { \r\n                ...state, alert: { show: false, message: '', type: '' } \r\n            };\r\n            \r\n        default:\r\n            return state; //return state as is if the action type indicated is not handled\r\n    }//close switch statement\r\n\r\n}\r\nexport default reducer;","import { IAction, IUser } from \"../app.interfaces\";\r\n\r\n//function that handles Create Tenant\r\nexport const handleCreateUser = async (userToCreate: IUser, dispatch: React.Dispatch<IAction>) => {\r\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating user ...'\r\n    dispatch({ type: 'BeforeCreateUser' });\r\n    //let's try to write to backend\r\n    try {\r\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\r\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\r\n        const response = await fetch('/users',\r\n            {\r\n                method: 'POST',\r\n                //mode: 'cors', // no-cors, *cors, same-origin\r\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                //credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                //redirect: 'follow', // manual, *follow, error\r\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\r\n                body: JSON.stringify(userToCreate) // body data type must match \"Content-Type\" header\r\n\r\n            });\r\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\r\n        //Response is ok. Proceed!\r\n        const userCreated: IUser = await response.json();\r\n\r\n        //useReducer to dispatch successful user creation, sending userCreated as payload.\r\n        dispatch({ type: 'CreateUserSuccess', payload: { user: userCreated } });\r\n    } catch (error) {\r\n        //dispatch error to state for display\r\n        dispatch({ type: 'CreateUserFailure', payload: { error: error } });\r\n    }\r\n}","import { IAction } from \"../app.interfaces\";\r\n\r\nexport const handleDeleteUser = async (id: number | string, dispatch: React.Dispatch<IAction>) => {\r\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\r\n    dispatch({ type: 'BeforeDeleteUser' });\r\n    try {\r\n        const response = await fetch(`/users/${id}`, //note this URL\r\n            {\r\n                method: 'DELETE',\r\n                //mode: 'cors', // no-cors, *cors, same-origin\r\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                //credentials: 'same-origin', // include, *same-origin, omit\r\n                //redirect: 'follow', // manual, *follow, error\r\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            });\r\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\r\n        //Response is ok. Proceed!\r\n        //remove tenant from state\r\n        dispatch({ type: 'DeleteUserSuccess', payload: { id: id } })\r\n    } catch (error) {\r\n        //problem deleting from backend\r\n        dispatch({ type: 'DeleteUserFailure', payload: { error: error } })\r\n    }\r\n}","import { IAction, IUser } from \"../app.interfaces\";\r\n\r\n\r\nexport const handleUpdateUser = async (editedUser: IUser, dispatch: React.Dispatch<IAction>) => {\r\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\r\n    //Of course, this alert will only flash if it takes very minimal time to create item\r\n    dispatch({ type: 'BeforeUpdateUser' })\r\n    //let's try to write to backend\r\n    try {\r\n        const response = await fetch(`/users/${editedUser.id}`,\r\n            {\r\n                method: 'PUT',//notice the method\r\n                //mode: 'cors', // no-cors, *cors, same-origin\r\n                //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                //credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                //redirect: 'follow', // manual, *follow, error\r\n                //referrerPolicy: 'no-referrer', // no-referrer, *client\r\n                body: JSON.stringify(editedUser) // body data type must match \"Content-Type\" header\r\n\r\n            });\r\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\r\n        //Response is ok. Proceed with setting state with itemUpdated\r\n        //partial update does not return full object, hence I am not using below to get tenant updated\r\n        //const tenantUpdated = await response.json();\r\n        await response.json();\r\n        //dispatch to state\r\n        dispatch({ type: 'UpdateUserSuccess', payload: { user: editedUser } })\r\n    } catch (error) {\r\n        dispatch({ type: 'UpdateUserFailure', payload: { error: error } })\r\n    }\r\n\r\n}","import { IAction, IFindOptions } from \"../app.interfaces\";\r\n\r\n\r\n//function to fetch data\r\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\r\n//findOptions defaults to empty {}\r\nexport const handleReadUsers = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\r\n    try {\r\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\r\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\r\n      //when we serve both the client react application and the backend from the same domain.\r\n      const response = await fetch(`/users?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\r\n      \r\n      if (!response.ok) throw new Error(response.statusText);\r\n\r\n      const data = await response.json();\r\n      \r\n      //set in state  \r\n      dispatch({type: 'FetchDataSuccess', payload: {usersCount: data.count, users: data.users}})\r\n    } catch (error) {\r\n      //set state\r\n      //alert(error)\r\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\r\n    }\r\n  };","import React from 'react';\r\nimport { Notification, Button } from 'react-bulma-components';\r\n\r\ntype Props = {\r\n    message: string,\r\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\r\n    onClickHandler: ()=>void\r\n\r\n}\r\n\r\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\r\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\r\n    return(\r\n        <Notification color={type} onClick={onClickHandler}>\r\n          {message}\r\n            <Button remove />\r\n        </Notification>\r\n    )\r\n}\r\n\r\nexport default Alert ","/** This component is for displaying each item in the record, passed to it from UserList */\r\nimport React, { useContext } from 'react';\r\nimport { IUser } from '../app.interfaces';\r\nimport { AppContext } from '../App';\r\n\r\ntype Props = {\r\n    user: IUser,\r\n}\r\n\r\nconst User: React.FC<Props> = ({user}) => {\r\n\r\n    //declare applicable contexts\r\n    const appContext = useContext(AppContext);\r\n\r\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\r\n    const onDeleteUser = () => {\r\n        appContext!.handleDeleteUser!(user.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\r\n    };\r\n\r\n    //callback function for edit button\r\n    const onEditUser = () => {\r\n        //appContext!.handleEditTenant!(tenant.id, appContext!.dispatch); //notice here that we are invoking the handleEditTenant() via appContext. The exclamation mark is because of the possible null which will not really happen\r\n        appContext!.dispatch({ type: 'HandleEditUser', payload: {id: user.id} });\r\n    };\r\n\r\n    const onViewUser = () => {\r\n        appContext!.dispatch({type: 'HandleViewUser', payload: {user}})\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{user.firstName}</td>\r\n            <td>{user.middleName}</td>\r\n            <td>{user.lastName}</td>\r\n            <td>{user.commonName}</td>\r\n            <td>{user.gender}</td>\r\n            <td>{user.primaryEmailAddress}</td>\r\n            <td>{user.isActive}</td>\r\n            <td>\r\n\r\n                <div className=\"buttons are-small\">\r\n                    <button className=\"button is-link\" onClick={onViewUser}>View Detail</button>\r\n                    <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\r\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\r\n                </div>\r\n\r\n            </td>\r\n\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default User;","    /** Table header. We are separating this from TenantList just in case it has to carry out\r\n * some specific tasks like firing sort event based on the header column clicked.\r\n*/\r\nimport React from 'react';\r\n\r\n\r\nconst UserListHeader: React.FC = () => {\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n          {/* <th>Code</th> */}\r\n          <th>Common Name</th>\r\n          <th>First Name</th>\r\n          <th>Middle Name</th>\r\n          <th>Last Name</th>\r\n          <th>Gender</th>\r\n          <th>Email address</th>\r\n          <th>Active</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n\r\nexport default UserListHeader;","import React from 'react';\r\nimport { IUser } from '../app.interfaces';\r\nimport User from './User';\r\nimport UserListHeader from './UserListHeader';\r\n\r\n\r\n//declare type for Props passed to this \r\ntype Props = {\r\n    users: IUser[],\r\n}\r\n\r\nconst UserList: React.FC<Props> = (props) => {\r\n\r\n    //prepare tenants for display in a table\r\n    let userListRows = null;\r\n   userListRows = props.users.map((user) => {\r\n        return <User user={user} />\r\n    })\r\n\r\n    return (\r\n        <table className=\"table is-striped is-narrow is-hoverable\" >\r\n            <caption><h3>Available users</h3></caption>\r\n            <UserListHeader />\r\n            <tbody>\r\n                {userListRows}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default UserList;","/** This component is for displaying each tenant in the record, passed to it from TenantList */\r\nimport React, { useState } from 'react';\r\nimport { IAction, IUser } from '../app.interfaces';\r\n\r\n//create the type for the anticipated props to be passed from parent component\r\ntype Props = {\r\n    handleCreateUser: Function,\r\n    dispatch: React.Dispatch<IAction>\r\n}\r\n\r\nconst AddUser: React.FC<Props> = (props) => {\r\n\r\n    const initialUserState: IUser = {\r\n        firstName: '',\r\n        middletName:'',\r\n        lastName: '',\r\n        commonName:'',\r\n        gender: '',\r\n        primaryEmailAddress:'',\r\n        dateOfBirth: new Date(),//--bring this up in class\r\n        isActive: false,\r\n        profile: {\r\n            homeAddress: '',\r\n            Nationality: '',\r\n            stateOfOrigin: '',\r\n            bulmaProperties: {\r\n                primaryColor: '',\r\n                primaryBackground: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    //declare the state variable for user to be added from form. Notice that we are using an object containing the individual elements\r\n    //We need to interact with them individually as state variable that will change in response to input onChange \r\n    const [user, setUser] = useState<IUser>({ ...initialUserState });\r\n\r\n    //create a general onChange event handler for form inputs that fire onChange event\r\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\r\n    const onChange = (event: React.FormEvent) => {\r\n        const userState = user;//check out user in state as is\r\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\r\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\r\n        userState[target.name] = target.value;\r\n        setUser({ ...userState });//checkin the modified state\r\n    }\r\n\r\n    //function to handle form onSubmit event\r\n    const onSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault();//do not do the default form submit to the server\r\n        props.handleCreateUser(user, props.dispatch);//call the handleAddUser function passed via props.\r\n    }\r\n\r\n    //function to handle form onCancel\r\n    const onCancel = () => {\r\n        //dispatch to state\r\n        props.dispatch({ type: 'HandleCancelCreate' })\r\n    }\r\n\r\n    //Note where the above functions are used below within the return statement\r\n    return (\r\n        <div className=\"columns is-mobile\">\r\n            <div className=\"column is-two-thirds\">\r\n                <div className=\"box\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <legend>Add User:</legend>\r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label\">Code</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Code input\" name=\"code\" value={tenant.code} onChange={onChange} required/>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">First name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"firstName\" value={user.firstName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Middle name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Middle name input\" name=\"middleName\" value={user.middleName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Last name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Last name input\" name=\"lastName\" value={user.lastName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Common name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Common name input\" name=\"commonName\" value={user.commonName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Gender</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Gender input\" name=\"gender\" value={user.gender} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Email address</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"email\" placeholder=\"Email Address\" name=\"primaryEmailAddress\" value={user.primaryEmailAddress} onChange={onChange} required/>\r\n                            </div>\r\n                            <p className=\"help is-info\">Enter a valid email here</p>\r\n                        </div>\r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label\">Date of Birth</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"Date\" type=\"date\" placeholder=\"Date of Birth\" name=\"dateOfBirth\" value={user.dateOfBirth} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>----bring this up in class */}\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link\">Submit</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AddUser;","/** This component is for displaying each tenant in the record, passed to it from TenantList */\r\nimport React, { useState } from 'react';\r\nimport { IAction, IUser } from '../app.interfaces';\r\n\r\n//create the type for the anticipated props to be passed from parent component\r\ntype Props = {\r\n    user: IUser,\r\n    handleUpdateUser: Function,\r\n    dispatch: React.Dispatch<IAction>\r\n}\r\n\r\nconst EditUser: React.FC<Props> = (props) => {\r\n\r\n    const initialUserState: IUser = {\r\n        id: props.user.id,\r\n        //code: props.tenant.code,\r\n        firstName: props.user.firstName,\r\n        middleName: props.user.middleName,\r\n        lastName: props.user.lastName,\r\n        commonName: props.user.commonName,\r\n        gender: props.user.gender,\r\n        primaryEmailAddress: props.user.primaryEmailAddress,\r\n        dateOfBirth: props.user.dateOfBirth,\r\n        isActive: props.user.isActive,\r\n        /*\r\n        customTheme: {\r\n            name: props.tenant.customTheme!.name,\r\n            description: props.tenant.customTheme!.description,\r\n            properties: props.tenant.customTheme!.properties,\r\n            bulmaProperties: {\r\n                primaryColor: props.tenant.customTheme!.bulmaProperties!.primaryColor,\r\n                primaryBackground: props.tenant.customTheme!.bulmaProperties!.primaryBackground\r\n            }\r\n        }\r\n        */\r\n    }\r\n\r\n    //declare the state variable for user to be added from form. Notice that we are using an object containing the individual elements\r\n    //We need to interact with them individually as state variable that will change in response to input onChange \r\n    const [user, setUser] = useState<IUser>({ ...initialUserState });\r\n\r\n    //create a general onChange event handler for form inputs that fire onChange event\r\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\r\n    const onChange = (event: React.FormEvent) => {\r\n        const userState = user;//check out user in state as is\r\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\r\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\r\n        userState[target.name] = target.value;\r\n        setUser({ ...userState });//checkin the modified state\r\n    }\r\n\r\n    //function to handle form onSubmit event\r\n    const onSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault();//do not do the default form submit to the server\r\n        props.handleUpdateUser(user, props.dispatch);//call the handleAddUser function passed via props.\r\n    }\r\n\r\n    //function to handle form onCancel\r\n    const onCancel = () => {\r\n        //props.handleCancelUpdate(props.dispatch);//call the function handleCancelAdd passed via props\r\n        //simply set state to make displayUpdate disappear\r\n        props.dispatch({ type: 'HandleCancelUpdate' });\r\n    }\r\n\r\n    //Note where the above functions are used below within the return statement\r\n    return (\r\n        <div className=\"columns is-mobile\">\r\n            <div className=\"column is-two-thirds\">\r\n                <div className=\"box\">\r\n                    <form onSubmit={onSubmit}>\r\n                    <legend>Add User:</legend>\r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label\">Code</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Code input\" name=\"code\" value={tenant.code} onChange={onChange} required/>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">First name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"firstName\" value={user.firstName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Middle name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Middle name input\" name=\"middleName\" value={user.middleName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Last name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Last name input\" name=\"lastName\" value={user.lastName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Common name</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Common name input\" name=\"commonName\" value={user.commonName} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Gender</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"text\" placeholder=\"Gender input\" name=\"gender\" value={user.gender} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Email address</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"input\" type=\"email\" placeholder=\"Email Address\" name=\"primaryEmailAddress\" value={user.primaryEmailAddress} onChange={onChange} required/>\r\n                            </div>\r\n                            <p className=\"help is-info\">Enter a valid email here</p>\r\n                        </div>\r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label\">Date of Birth</label>\r\n                            <div className=\"control\">\r\n                                <input className=\"Date\" type=\"date\" placeholder=\"Date of Birth\" name=\"dateOfBirth\" value={user.dateOfBirth} onChange={onChange} required/>\r\n                            </div>\r\n                        </div>----bring this up in class */}\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link\">Submit</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default EditUser;","/** This component is for displaying each item in the record, passed to it from TenantList */\r\nimport React, { useContext } from 'react';\r\nimport { IUser } from '../app.interfaces';\r\nimport { AppContext } from '../App';\r\n\r\ntype Props = {\r\n    user: IUser,\r\n}\r\n\r\nconst ViewUser: React.FC<Props> = ({ user }) => {\r\n\r\n    //declare applicable contexts\r\n    const appContext = useContext(AppContext);\r\n\r\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\r\n    const onDeleteUser = () => {\r\n        appContext!.handleDeleteUser!(user.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteUser() via appContext. The exclamation mark is because of the possible null which will not really happen\r\n    };\r\n\r\n    //callback function for edit button\r\n    const onEditUser = () => {\r\n        //appContext!.handleEditUser!(user.id, appContext!.dispatch); //notice here that we are invoking the handleEditUser() via appContext. The exclamation mark is because of the possible null which will not really happen\r\n        appContext!.dispatch({ type: 'HandleEditUser', payload: { id: user.id } });\r\n    };\r\n\r\n    const onClickCloseButton = () => {\r\n        appContext!.dispatch({type: 'HandleCloseViewUser'})\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background\"></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">{`Details of ${user.name}`}</p>\r\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton}/>\r\n                </header>\r\n                <section className=\"modal-card-body\">\r\n                    {/*<!-- Content ... -->*/}\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                           First name:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.firstName}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Middle name:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.middletName}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Last name:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.lastName}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Common name:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.commonName}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Gender:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.gender}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Email address:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.primaryEmailAddress}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"columns\">\r\n                        <div className=\"column is-two-fifths\">\r\n                            Active:\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            {user.isActive? \"Yes\" : \"No\"}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <footer className=\"modal-card-foot\">\r\n                    <div className=\"buttons are-small\">\r\n                        <button className=\"button is-warning\" onClick={onEditUser}>Edit</button>\r\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteUser() }}>Delete</button>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ViewUser;","import React, { useEffect, useReducer } from 'react';\r\nimport { IAction, IFindOptions, IState } from './app.interfaces';\r\nimport reducer from './reducers/app.reducer';\r\n\r\nimport { handleCreateUser } from './user-crud-handlers/create';\r\nimport { handleDeleteUser } from './user-crud-handlers/delete';\r\nimport { handleUpdateUser } from './user-crud-handlers/update';\r\nimport { handleReadUsers } from './user-crud-handlers/read';\r\nimport Alert from './components/Alert';\r\nimport UserList from './components/UserList';\r\n\r\nimport AddUser from './components/AddUser';\r\nimport EditUser from './components/EditUser';\r\nimport ViewUser from './components/ViewUser';\r\n\r\n/**\r\n * Here, we take for granted that on initialization, \r\n * jwt token string may be sent by the server, if there is valid login\r\n * To get the userinfo and roles from the token, \r\n * we can use https://github.com/auth0/jwt-decode\r\n */\r\ntype Props = {\r\n  jwtToken?: string\r\n}\r\n\r\n/*Below is type definition for our context type.*/\r\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\r\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\r\n//different ones.\r\ntype AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteUser: Function };\r\n\r\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\r\n//We are also going to pass dispatch returned by useReducer.\r\nexport const AppContext = React.createContext<AppContextType>(null);\r\n\r\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\r\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\r\nWe don't have to do this. But it is good to know.*/\r\ntype Reducer<S, A> = (prevState: S, action: A) => S;\r\n\r\nconst App: React.FC<Props> = ({ jwtToken }) => {\r\n\r\n  /*let us organize state, using useReducer*/\r\n  //Prepare initial state values\r\n  const initialState: IState =\r\n  {\r\n    users: [],\r\n    user: null,\r\n    onAddUser: false,\r\n    onViewUser: false,\r\n    onEditUser: false,\r\n    alert: { show: false, message: '', type: '' }\r\n  };\r\n\r\n  //using useReducer instead of useState\r\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\r\n\r\n  /*Additional handler functions here*/\r\n  //Below is called by Alert component.\r\n  const handleCloseAlert = () => {\r\n    dispatch({ type: 'HandleCloseAlert' });\r\n  }\r\n\r\n\r\n  //Just testing findOptions. Can be used to qualify find.\r\n  //let findOptions: IFindOptions = {\"select\":[\"id\",\"name\", \"contactFirstName\",\"dateCreated\"], \"order\": {\"name\": \"ASC\", \"id\": \"DESC\"}}\r\n  let findOptions: IFindOptions = {}\r\n  /**\r\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\r\n   */\r\n  useEffect(() => {\r\n    handleReadUsers(dispatch, findOptions);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /*Time to logically decide what to show.*/\r\n  //Setup alert component as a variable so we don't keep repeating\r\n  const myAlert = (\r\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\r\n  )\r\n\r\n  //check if editTenant should be loaded or not since it is conditional loading\r\n  if (state.onEditUser && state.user !== null) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"content is-medium\">\r\n          <p>\r\n            <EditUser user={state.user!} handleUpdateUser={handleUpdateUser} dispatch={dispatch} />\r\n          </p>\r\n          <p>\r\n            {state.alert.show && myAlert}\r\n          </p>\r\n          <p>\r\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\r\n              <UserList users={state.users!} />\r\n            </AppContext.Provider>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (state.onAddUser) {//Display AddTenant along with TenantList if onAddTenant is true\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"content is-medium\">\r\n          <p>\r\n            <AddUser handleCreateUser={handleCreateUser} dispatch={dispatch} />\r\n          </p>\r\n          <p>\r\n            {state.alert.show && myAlert}\r\n          </p>\r\n          <p>\r\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\r\n              <UserList users={state.users!} />\r\n            </AppContext.Provider>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (state.onViewUser && state.user != null) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"content is-medium\">\r\n          <p>\r\n            <AppContext.Provider value={{dispatch, handleDeleteUser }}>\r\n              <ViewUser user={state.user!} />\r\n            </AppContext.Provider>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {//onAddUser is false\r\n    return (\r\n      <div className=\"container \">\r\n        <div className=\"content is-medium\">\r\n          <p>\r\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddUser' }) }}>+ Add User</button>\r\n          </p>\r\n          <p>\r\n            {state.alert.show && myAlert}\r\n          </p>\r\n          <p>\r\n            <AppContext.Provider value={{ dispatch, handleDeleteUser }}>\r\n              <UserList users={state.users!} />\r\n            </AppContext.Provider>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n/* For server side rendering support, we need to use hydrate.\r\nWe will also get the json data that was written to our server-side template for use here\r\nOf course, this assumes that we have linked the built js clients to the server side template\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n*/\r\n\r\nconst initialData = document.getElementById('initial-props')!.getAttribute('data-json')!;\r\n\r\nconst initialProps: {} = JSON.parse(initialData? initialData: '');//parse initial data or empty string\r\n\r\nReactDOM.hydrate(<App {...initialProps}/>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}